<?php
/**
 * Magento
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Academic Free License (AFL 3.0)
 * that is bundled with this package in the file LICENSE_AFL.txt.
 * It is also available through the world-wide-web at this URL:
 * http://opensource.org/licenses/afl-3.0.php
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@magentocommerce.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade Magento to newer
 * versions in the future. If you wish to customize Magento for your
 * needs please refer to http://www.magentocommerce.com for more information.
 *
 * @category    design
 * @package     default_default
 * @copyright   Copyright (c) 2012 Magento Inc. (http://www.magentocommerce.com)
 * @license     http://opensource.org/licenses/afl-3.0.php  Academic Free License (AFL 3.0)
 */

?>
<!-- Configs list -->
<table cellspacing="0" class="form-edit">
<tr>
<td class="config-list">
    <div class="entry-edit-head">
        <h4 class="icon-head head-customer-config-list"><?php echo Mage::helper('customer')->__('Import Adapter Configurations') ?></h4>
    </div>
    <div class="sub-btn-set"><?php echo $this->getAddNewButtonHtml() ?></div>
    <ul id="config_list">
    <?php $_iterator = 0;?>
    <?php if(count($configCollection)): ?>
        <?php $i = 0; ?>
        <?php foreach ($configCollection as $_config): ?>
            <?php $configId = $_config->getConfigId() ? $_config->getConfigId() : 'adapter_item'.++$i?>
        <li id="config_item_<?php echo $configId ?>">
            <a href="#" class="btn-remove-config">
                <img src="<?php echo $this->getSkinUrl('images/cancel_icon.gif') ?>" alt="Remove config" id="delete_button<?php echo ++$_iterator ?>" />
            </a>
            <span class="config-name"><?php echo $_config->getName() ?></span>
        </li>
        <?php endforeach; ?>
    <?php endif; ?>
    </ul>
</td>
<td>
    <!-- Template for adding config item to list -->
    <?php $_templatePrefix = $this->getTemplatePrefix() ?>
    <div id="config_item_template" class="no-display template">
        <a href="#" class="btn-remove-config">
            <img src="<?php echo $this->getSkinUrl('images/cancel_icon.gif') ?>" alt="Remove config" id="delete_button<?php echo ++$_iterator ?>" />
        </a>
        <span class="config-name"><?php echo Mage::helper('magedoc')->__('New Retailer Import Adapter Config') ?></span>
    </div>

    <!-- config form template -->
    <div id="config_form_template"  class="no-display template">
    <?php
        // Set form template elements prefix
        $this->getForm()->setHtmlIdPrefix($_templatePrefix)
                ->setFieldNameSuffix('retailer_adapter_config['.$_templatePrefix.']');
    ?>
    <?php echo $this->getForm()->getHtml() ?>
    <?php echo $this->getCancelButtonHtml() ?>
    </div>
<!-- -->

<!-- configs forms -->
    <div class="entry-edit" id="config_form_container">
        <?php if(count($configCollection)): ?>
            <?php $i = 0; ?>
            <?php foreach ($configCollection as $_config): ?>
            <?php $configId = $_config->getConfigId() ? $_config->getConfigId() : 'adapter_item'.++$i?>
            <div id="form_config_item_<?php echo $configId ?>" class="item_template" style="display:none">
            <?php
                    $this->initForm()
                            ->getForm()
                            ->addValues($_config->getData())
                            ->setHtmlIdPrefix("_item{$configId}")
                            ->setFieldNameSuffix('retailer_adapter_config['.$configId.']');
                    $this->addValuesToNamePrefixElement($_config->getPrefix())
                        ->addValuesToNameSuffixElement($_config->getSuffix());
            ?>
            <?php echo $this->getForm()->getHtml() ?>
            <input type="hidden" name="retailer_adapter_config[<?php echo $configId ?>][_deleted]" id="deleted_config_item_<?php echo $configId ?>" />
            </div>
            <?php endforeach; ?>
        <?php else: ?>
            <div id="no_config_message"><?php echo Mage::helper('customer')->__('This retailer has no import configs yet.') ?></div>
        <?php endif; ?>
    </div>

<script type="text/javascript">
//<![CDATA[
var deleteButtonId = <?php echo $_iterator ?>;

var configsModel = Class.create();
configsModel.prototype = {
    initialize : function() {
        this.activeItem   = null;
        this.itemTemplate = $('config_item_template');
        this.formTemplate = $('config_form_template');
        this.itemContainer= $('config_list');
        this.formContainer= $('config_form_container');
        this.baseItemId   = 'new_item';

        this.itemContentTemplate = new Template('#{name}');

        this.onNewconfigClick  = this.addNewConfig.bindAsEventListener(this);
        this.onItemMouseOver    = this.itemMouseOver.bindAsEventListener(this);
        this.onItemMouseOut     = this.itemMouseOut.bindAsEventListener(this);
        this.onItemMouseClick   = this.itemMouseClick.bindAsEventListener(this);
        this.onItemFormFieldChange = this.syncFormData.bindAsEventListener(this);

        this.reloadItemList(1);

        for(var i=0,n=this.itemList.length; i<n; i++){
            if(this.itemList[i].id){
                this.addItemObservers(this.itemList[i]);
                this.initItem(this.itemList[i]);
            }
        }
        if($('add_new_config_button')){
            Event.observe('add_new_config_button', 'click', this.onNewconfigClick)
        }

        this.setActiveItem(this.itemList[0]);
        this.setconfigAsDefault();
    },

    reloadItemList : function(initial) {
        this.itemList = $$('#config_list li');
        if( initial ) {
            this.itemCount = this.itemList.length;
        }
        if(!this.itemList.length){
            if($('no_config_message')){
                $('no_config_message').show();
            }
            else {
                this.formContainer.innerHTML+= '<div id="no_config_message"><?php echo addslashes(Mage::helper('customer')->__('This customer has no saved configs.')) ?></div>'
            }
        }
    },

    initItem : function(item){
        if(item && $('form_'+item.id)){
            item.formBlock = $('form_'+item.id);
            Element.hide($('form_'+item.id));
            $('form_'+item.id).statusBar = item;
            $('form_'+item.id).configItem = item;
        }
    },

    addItemObservers : function(item){
        if(item.id){
            Event.observe(item, 'mouseover', this.onItemMouseOver);
            Event.observe(item, 'mouseout', this.onItemMouseOut);
            Event.observe(item, 'click', this.onItemMouseClick);
        }
    },

    addNewConfig : function(event){
        this.itemCount++;
        if($('no_config_message')){
            $('no_config_message').hide();
        }
        // preventing duplication of ids for fields and blocks
        while ($$("div[id='form_config_item_" + this.itemCount + "']").length) {
            this.itemCount++;
        }
        // create new form elements
        Element.insert(this.formContainer, {bottom:
            '<div id="' + 'form_' + this.baseItemId + this.itemCount + '">'
            + this.prepareTemplate(this.formTemplate.innerHTML)
            + '</div>'
        });

        var newForm = $('form_' + this.baseItemId + this.itemCount);
        newForm.addClassName('item_template');
        Element.hide(newForm);
        var template = '<li id="' + this.baseItemId+this.itemCount + '">';
        deleteButtonId ++;
        template    += this.prepareTemplate(this.itemTemplate.innerHTML).replace('delete_button', 'delete_button'+ deleteButtonId);
        template    += '</li>';
        Element.insert(this.itemContainer, {bottom: template});
        var newItem = $(this.baseItemId+this.itemCount);
        newItem.isNewconfig = true;
        newItem.formBlock = newForm;


        newForm.statusBar = newItem;
        newForm.configItem = newItem;

        this.addItemObservers(newItem);
        this.setActiveItem(newItem);

        this.reloadItemList();
    },

    prepareTemplate : function(template){        
        return template
                .replace(/<?php echo $_templatePrefix ?>/g, '_item'+this.itemCount)
                .replace(/_counted="undefined"/g, '')
                .replace(/"select_button_"/g, 'select_button_' + this.itemCount);
    },

    itemMouseOver : function(event){
        var element = Event.findElement(event, 'li');
        Element.addClassName(element, 'over');
    },

    itemMouseOut : function(event){
        var element = Event.findElement(event, 'li');
        Element.removeClassName(element, 'over');
    },

    itemMouseClick : function(event){
        if (!Event) {
            return;
        }
        var element = Event.findElement(event, 'li'); // find top item
        var elem = Event.element(event); // exact element clicked

        if ( ((elem.tagName.toUpperCase() == 'A') && elem.id.match(/^delete_button([0-9]*?)$/)) || ((elem.tagName.toUpperCase() == 'IMG') && elem.id.match(/^delete_button([0-9]*?)$/)) ) {
            this.deleteconfig(element);
            Event.stop(event);
        }
        else if(elem.tagName.toUpperCase() == 'INPUT') {
            this.setconfigAsDefault(element);
        }
        else {
            this.setActiveItem(element);
        }
    },

     setconfigAsDefault : function(){
        for(var i=0; i<this.itemList.length;i++){
            if(this.itemList[i].id){
                var inputs = $(this.itemList[i].id).getElementsBySelector('input');
                var isActive = false;
                for(var j in inputs){
                    if(inputs[j].type=='radio' && inputs[j].checked && this.itemList.length > 1){
                        isActive = true;
                    }
                }
                this.toggleDeleteButton(this.itemList[i], !isActive);
            }
        }
    },

    toggleDeleteButton : function(item, flag){
        if(flag){
            $(item).select('.btn-remove-config').each(Element.show);
            $(item.formBlock).getElementsBySelector('.delete-config').each(Element.show);
        } else {
            $(item).select('.btn-remove-config').each(Element.hide);
            $(item.formBlock).getElementsBySelector('.delete-config').each(Element.hide);
        }
    },

    setActiveItem : function(item){
        if(this.activeItem){
            Element.removeClassName(this.activeItem, 'on');
            if($('form_'+this.activeItem.id)){
                Element.hide($('form_'+this.activeItem.id));
            }
        }
        Element.addClassName(item, 'on');

        if(item && $('form_'+item.id)){
            $('form_'+item.id).changeRelation = item;
            $('form_'+item.id).configItem = item;
            Element.show($('form_'+item.id));
            this.addFieldChangeObserver($('form_'+item.id));
        }

        this.activeItem = item;
    },

    getFormContainerFields : function(container){
        var fields = $$( '#' + container.id + ' input','#' + container.id + ' select','#' + container.id + ' textarea');
        return fields;
    },

    addFieldChangeObserver : function(container){
        var fields = this.getFormContainerFields(container);
        for (var i = 0; i < fields.length; i++) {
            Event.observe(fields[i], 'change', this.onItemFormFieldChange);
        }
    },

    syncFormData : function(evt){
        var container = false;
        if(!evt.addClassName) {
            var elm = Event.element(evt);
        } else {
            var elm = evt;
        }

        elm = $(elm);
        while(elm.tagName.toUpperCase() != 'BODY') {
            if(elm.configItem){
                container = elm;
            }
            elm = $(elm.parentNode);
        }

        if(container){
            // Set data to html
            var itemContainer = container.configItem.getElementsBySelector('span.config-name');
            var data = {
                'name' :  this.getFormContainerFields(container)[0].value
            };

            console.log(data);
            if(itemContainer[0]){
                var html = this.itemContentTemplate.evaluate(data);
                itemContainer[0].innerHTML = html;
            }
        }
    },

    deleteconfig : function(item){
        if(confirm('<?php echo Mage::helper('customer')->__('Are you sure you want to delete this config?') ?>')){
            if (!item.isNewconfig && $('deleted_'+item.id)){
                $('deleted_'+item.id).value = 1;
                if (item.formBlock){
                    item.formBlock.addClassName('ignore-validation');
                }
            }
            if (this.activeItem == item && item != this.itemList[0]) this.setActiveItem(this.itemList[0]);
            if (item == this.itemList[0] && (this.itemList[1])) this.setActiveItem(this.itemList[1]);

            this.formContainer.removeChild(item.formBlock);
            this.itemContainer.removeChild(item);
            this.reloadItemList();
            this.setconfigAsDefault();
        }
    }
}
customerConfigs = new configsModel();
//]]>
</script>
</td>
</tr>
</table>
